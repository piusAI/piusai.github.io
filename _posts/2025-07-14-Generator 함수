---
layout: post
published: false
title: "Mastering Generators and Exception Handling with Python"
subtitle: "The Power of `yield`, `StopIteration`, and `try-except-finally`"
cover-img: /assets/img/DFA1.png
thumbnail-img: /assets/img/DFA.png
share-img: /assets/img/path.jpg
tags: [python, generator, exception, StopIteration, try-except-finally, yield]
author: pius
---

{: .box-note}
**Note:** This post delves into the elegant combination of Python generators and robust exception handling. We'll explore a powerful code snippet to understand `yield`, `StopIteration`, and the `try-except-finally` block.

---

## ðŸ§· The Code That Steals the Show

Hey everyone! Today, I want to share an amazing Python code snippet that I absolutely love.
It combines generators with exception handling in a clean, efficient way.
This code is perfect for learning how to manage memory with `yield`,
handle `StopIteration`, and ensure proper cleanup with `finally`.
Letâ€™s dive in and explore how to set this up on your own GitHub Pages blog!

Hereâ€™s the fantastic code weâ€™ll be working with:



```python
import numpy as np

def number_generator():
    n = 0
    while n < 3:  # Yields 0 to 2, 3 times
        yield n
        n += 1
        
gen = number_generator() # Create the generator object

X = np.arange(7)  # Create a numpy array: [0 1 2 3 4 5 6]

try:  # Start of the exception handling block
    for i in iter(X): # Iterate through elements of X
        value = gen.__next__() # Request the next value from the generator
        print(value)
        if value == 7:  # This condition will never be true (value only goes up to 6)
            break
            
except StopIteration as e: # Catch the StopIteration exception when generator runs out of values
    print("nono")

finally: # This block always executes, regardless of whether an exception occurred
    print('done!')
